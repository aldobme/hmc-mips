#summary Summary of the testbenches that the Adelaide team has put together

Currently the Adelaide team has been writing its testbenches for IRSIM, and running them under electric, as the ModelSim dev environment on our PCs does not have support for verilog at this stage.

All the tests are located in subversion, at [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/ testing/adelaide].

=Mel=
The following testbenches were written by Mel.

  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_adrtagdatalogic.cmd test_adrtagdatalogic]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_byteenlog.cmd test_byteenlog]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_dataout_read.cmd test_dataout_read]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_dataout_write.cmd test_dataout_write]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_mux2_1x_32.cmd test_mux2_1x_32]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_mux2_4.cmd test_mux2_4]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_mux2_c_1x.cmd test_mux2_c_1x]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_mux2_dp_1x.cmd test_mux2_dp_1x]
  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_mux2_zip.cmd test_mux2_zip]

=Rob=
This testbench provides coverage for the srambit.

It provides all the required functionality, however there is a small issue with having to set lines to `x` (floating). He tried to make it work like the description in the text book, however it still requires manually setting some signals to `x`. Unsure if the circuit was supposed to do this on its own, but it doesn't work unless they are explicitly set.

  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_srambit.cmd test_srambit]

=Rhys=
This testbench is auto-generated by [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/DecoderBench.java DecoderBench.java].

The first test tests each decoder input with a randomly chosen clock input, in lexicographic order.
The second test tests each decoder input with a 1 value for the clock.

  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_decoder64.cmd test_decoder64]

  * [http://hmc-mips.googlecode.com/svn/trunk/testing/adelaide/test_decoder64_1.cmd test_decoder64]

# Harvey Mudd College VLSI MIPS Project
# Thomas W. Barr, Carl Nygaard
# Spring, 2007
#
# Test 010
#
# Created: 1/20/07
#
#   Decode stage exception tests.

# Start code 0x1FC00000
main:   syscall 0	        # syscall.
	nop			# just for now, we keep nops here.
        break 0		        # run the break call
	nop
        nop		        # modified in source code to be a malformed opcode
	# add floating point test later.

end:    beq   $0, $0, end       # loop forever
        nop


# Start exception code 0x1FC00100
except: mfc0  $4, $13           # get the cause register
        mfc0  $7, $14           # get the exception address
        andi  $4, 0xff          # mask out the exception code
        srl   $4, $4, 2         # align the exception code
	# start testing for codes
        addi  $5, $0, 8        # $5 = 8
        beq   $4, $5, systrap       # branch to the appropriate location
        addi  $5, $0, 9        # $5 = 9
        beq   $4, $5, brktrap       
        addi  $5, $0, 8        # $5 = 10
        beq   $4, $5, ioptrap      
        addi  $5, $0, 8        # $5 = 1
        beq   $4, $5, fputrap      

systrap: addi $8 $8 1
	 beq $0 $0 resume

brktrap: addi $8 $8 2
	 beq $0 $0 resume

ioptrap: addi $8 $8 4
	 beq $0 $0 resume

fputrap: addi $8 $8 8
	 beq $0 $0 resume

resume:
        nop
        nop # something is weird here, so adding nops
        nop
        nop
        nop
        nop
        addi  $7, $7, 4         # Point to one past the errant instruction
        jr    $7                # Resume
        nop                     # BSD
